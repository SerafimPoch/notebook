{"version":3,"sources":["img/notebook.png","containers/Header/style.js","containers/Header/index.js","components/Main/background_blur/style.js","components/Main/notebook/style.js","components/Main/notebook/index.js","components/first_line/style.js","components/first_line/index.js","containers/Main/index.js","containers/App/style.js","serviceWorker.js","index.js","containers/App/index.js"],"names":["module","exports","__webpack_require__","p","HeaderContainer","styled","div","_templateObject","Header","react_default","a","createElement","Helmet","charSet","BackgroundNote","style_templateObject","NotebookPicture","img","notebook_style_templateObject","Main_notebook","src","notebook","alt","MiniDisplayContainer","first_line_style_templateObject","MiniDisplay","_templateObject2","first_line","Main","react","Container","App_style_templateObject","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kaCEjC,IAAMC,EAAkBC,IAAOC,IAAVC,KCEbC,EAAA,WACb,OACEC,EAAAC,EAAAC,cAACP,EAAD,KACEK,EAAAC,EAAAC,cAACC,EAAA,OAAD,KACEH,EAAAC,EAAAC,cAAA,QAAME,QAAQ,UACdJ,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,kIACAF,EAAAC,EAAAC,cAAA,wVCVC,IAAMG,EAAiBT,IAAOC,IAAVS,4KCApB,IAAMC,EAAkBX,IAAOY,IAAVC,KCEbC,EAAA,kBAAMV,EAAAC,EAAAC,cAACK,EAAD,CAAiBI,IAAKC,IAAUC,IAAI,qgBCFlD,IAAMC,EAAuBlB,IAAOC,IAAVkB,KASpBC,EAAcpB,IAAOC,IAAVoB,KCRxBC,EAAA,WACE,OACElB,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,mCCFNiB,EAAA,WACE,OACEnB,EAAAC,EAAAC,cAACkB,EAAA,SAAD,KACEpB,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACgB,EAAD,mLCRC,IAAMG,EAAYzB,IAAOC,IAAVyB,KCQhBC,eAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAK1BC,QAAQC,IAAI,6CAGRb,EAAOc,UACTd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,EAAOe,WACTf,EAAOe,UAAUV,SAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCnFjEC,IAASC,OAAOlD,EAAAC,EAAAC,cCDD,WACb,OACEF,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACiB,EAAD,QDHU,MAASgC,SAASC,eAAe,SDc1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,YAAwB7B,OAAOC,UAC3C6B,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMH,YAAN,sBAEP/B,GA2DV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEA/EAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MCzC/BE","file":"static/js/main.11332dd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notebook.847467f6.png\";","import styled from \"styled-components\";\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  font-size: 55px;\n  font-height: 52px;\n  align-items: center;\n  font-style: Regular;\n  flex-flow: column wrap;\n`;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { HeaderContainer } from \"./style\";\n\nexport default () => {\n  return (\n    <HeaderContainer>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Notebook page</title>\n      </Helmet>\n      <p>Без заплутаних дротів.</p>\n      <p>Без заплутаних ходів.</p>\n    </HeaderContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const BackgroundNote = styled.div`\n  display: flex;\n  align-items: center;\n  opacity: 0.5;\n  filter: blur(100px);\n  width: 100%;\n  height: 290px;\n  background-color: #3f449f;\n`;\n","import styled from \"styled-components\";\n\nexport const NotebookPicture = styled.img`\n  width: 100%;\n  height: 114px;\n  position: absolute;\n  margin-top: 250px;\n`;\n","import React from \"react\";\nimport notebook from \"../../../img/notebook.png\";\nimport { NotebookPicture } from \"./style\";\n\nexport default () => <NotebookPicture src={notebook} alt=\"notebook\" />;\n","import styled from \"styled-components\";\n\nexport const MiniDisplayContainer = styled.div`\n  display: flex;\n  position: relative;\n  flex-flow: column wrap;\n  align-items: flex-end;\n  top: -149px;\n  left: -224px;\n`;\n\nexport const MiniDisplay = styled.div`\n  width: 1px;\n  height: 130px;\n  background-color: #fff;\n  transform-origin: top;\n  animation: animate forwards 1.5s;\n\n  @keyframes animate {\n    0% {\n      height: 0px;\n    }\n\n    100% {\n      height: 130px;\n    }\n  }\n`;\n","import React from \"react\";\nimport { MiniDisplayContainer, MiniDisplay } from \"./style\";\n\nexport default () => {\n  return (\n    <MiniDisplayContainer>\n      <MiniDisplay />\n      <p>Mini DisplayPort 1.4</p>\n    </MiniDisplayContainer>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport { BackgroundNote } from \"../../components/Main/background_blur/style\";\nimport Notebook from \"../../components/Main/notebook\";\nimport FirstLine from \"../../components/first_line\";\n\nexport default () => {\n  return (\n    <Fragment>\n      <BackgroundNote />\n      <Notebook />\n      <FirstLine />\n    </Fragment>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-flow: column wrap;\n  margin: 76px 0px 112px 0px;\n`;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport \"./css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n","import React from \"react\";\nimport Header from \"../Header\";\nimport Main from \"../Main\";\nimport { Container } from \"./style\";\n\nexport default () => {\n  return (\n    <Container>\n      <Header />\n      <Main />\n    </Container>\n  );\n};\n"],"sourceRoot":""}